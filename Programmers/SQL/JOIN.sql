-- 없어진 기록 찾기
SELECT outs.ANIMAL_ID, outs.NAME
FROM ANIMAL_INS AS ins RIGHT JOIN ANIMAL_OUTS AS outs ON ins.ANIMAL_ID = outs.ANIMAL_ID
WHERE ins.ANIMAL_ID IS NULL;
-- 있었는데요 없었습니다
SELECT outs.ANIMAL_ID, outs.NAME
FROM ANIMAL_INS AS ins JOIN ANIMAL_OUTS AS outs ON ins.ANIMAL_ID = outs.ANIMAL_ID
WHERE ins.DATETIME > outs.DATETIME
ORDER BY ins.DATETIME;
-- 오랜 기간 보호한 동물
SELECT ins.NAME, ins.DATETIME
FROM ANIMAL_INS AS ins LEFT JOIN ANIMAL_OUTS AS outs ON ins.ANIMAL_ID = outs.ANIMAL_ID
WHERE outs.ANIMAL_ID IS NULL
ORDER BY ins.DATETIME
LIMIT 3;
-- 보호소에서 중성화한 동물
SELECT outs.ANIMAL_ID, outs.ANIMAL_TYPE, outs.NAME
FROM ANIMAL_INS AS ins JOIN ANIMAL_OUTS AS outs ON ins.ANIMAL_ID = outs.ANIMAL_ID
WHERE ins.SEX_UPON_INTAKE LIKE "Intact%" AND outs.SEX_UPON_OUTCOME NOT LIKE "INTACT%"
ORDER BY ins.ANIMAL_ID;
-- 상품 별 오프라인 매출 구하기
SELECT p.PRODUCT_CODE AS PRODUCT_CODE, p.PRICE*t.TOTAL_SALES as SALES
FROM PRODUCT p, (SELECT PRODUCT_ID, SUM(SALES_AMOUNT) as TOTAL_SALES 
                 FROM OFFLINE_SALE 
                 GROUP BY PRODUCT_ID) t
WHERE p.PRODUCT_ID=t.PRODUCT_ID
ORDER BY SALES DESC, PRODUCT_CODE ASC;
-- 5월 식품들의 총매출 조회하기
SELECT p.PRODUCT_ID AS PRODUCT_ID, p.PRODUCT_NAME AS PRODUCT_NAME, p.PRICE * t.TOTAL_AMOUNT AS TOTAL_SALES
FROM FOOD_PRODUCT p, (SELECT PRODUCT_ID, SUM(AMOUNT) AS TOTAL_AMOUNT
                      FROM FOOD_ORDER 
                      WHERE MONTH(PRODUCE_DATE)=5 
                      GROUP BY PRODUCT_ID) t
WHERE p.PRODUCT_ID=t.PRODUCT_ID
ORDER BY TOTAL_SALES DESC, PRODUCT_ID ASC;
-- 그룹별 조건에 맞는 식당 목록 출력하기
WITH RRC AS
(SELECT MEMBER_ID, COUNT(*) AS REVIEW_COUNT 
 FROM REST_REVIEW 
 GROUP BY MEMBER_ID)
SELECT m.MEMBER_NAME AS MEMBER_NAME, r.REVIEW_TEXT AS REVIEW_TEXT, DATE_FORMAT(r.REVIEW_DATE, "%Y-%m-%d") AS REVIEW_DATE
FROM MEMBER_PROFILE m, REST_REVIEW r, RRC c
WHERE m.MEMBER_ID=r.MEMBER_ID AND m.MEMBER_ID=c.MEMBER_ID AND c.REVIEW_COUNT=(SELECT MAX(REVIEW_COUNT) FROM RRC)
ORDER BY REVIEW_DATE;
-- 상품을 구매한 회원 비율 구하기
SELECT YEAR(o.SALES_DATE) AS YEAR, 
       MONTH(o.SALES_DATE) AS MONTH, 
       COUNT(DISTINCT o.USER_ID) AS USERS, 
       ROUND(COUNT(DISTINCT o.USER_ID)/(SELECT COUNT(*) 
                                       FROM USER_INFO 
                                       WHERE YEAR(JOINED)=2021), 1)
FROM ONLINE_SALE o, USER_INFO u
WHERE o.USER_ID=u.USER_ID AND YEAR(u.JOINED)=2021
GROUP BY YEAR, MONTH;